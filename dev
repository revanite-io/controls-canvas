// main.go

package main

import (
	"fmt"
	"os"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

var (
	selectedCapabilities      map[string]item
	triedToReselectCapability map[string]bool // Just having fun with this one

	titleText = "Common Cloud Controls Canvas"

	appStyle = lipgloss.NewStyle().Padding(1, 2)

	titleStyle = lipgloss.NewStyle().
			Foreground(lipgloss.Color("#FFFDF5")).
			Background(lipgloss.Color("#25A065")).
			Padding(0, 1)

	statusMessageStyle = lipgloss.NewStyle().
				Foreground(lipgloss.AdaptiveColor{Light: "#04B575", Dark: "#04B575"}).
				Render
)

func main() {
	selectedCapabilities = make(map[string]item)
	triedToReselectCapability = make(map[string]bool)

	if _, err := tea.NewProgram(newModel(), tea.WithAltScreen()).Run(); err != nil {
		fmt.Println("Error running program:", err)
		os.Exit(1)
	}
}

// item.go

package main

type item struct {
	id          string
	title       string
	description string
	capability  availableCapability
}

func (i item) Title() string       { return i.id + ": " + i.title }
func (i item) Description() string { return i.description }
func (i item) FilterValue() string { return i.title }

// listkeymap.go

package main

import "github.com/charmbracelet/bubbles/key"

type listKeyMap struct {
	toggleSpinner     key.Binding
	toggleTitleBar    key.Binding
	toggleStatusBar   key.Binding
	togglePagination  key.Binding
	toggleHelpMenu    key.Binding
	insertItem        key.Binding
	finalizeSelection key.Binding
}

func newListKeyMap() *listKeyMap {
	return &listKeyMap{
		toggleSpinner: key.NewBinding(
			key.WithKeys("s"),
			key.WithHelp("s", "toggle spinner"),
		),
		toggleHelpMenu: key.NewBinding(
			key.WithKeys("H"),
			key.WithHelp("H", "toggle help"),
		),
		finalizeSelection: key.NewBinding(
			key.WithKeys(" "),
			key.WithHelp("space", "generate output"),
		),
	}
}

// load.go

package main

import (
	"fmt"
	"os"
	"slices"
	"sort"

	"github.com/charmbracelet/bubbles/list"
	"github.com/revanite-io/sci/pkg/layer2"
)

type availableCapability struct {
	Data    layer2.Capability
	Threats []availableThreat
}

type availableThreat struct {
	Data     layer2.Threat
	Controls []availableControl
}

type availableControl struct {
	Data              layer2.Control
	FamilyTitle       string
	FamilyDescription string
}

func loadData() (output []availableCapability) {
	var catalog layer2.Catalog
	err := catalog.LoadFiles([]string{
		"https://raw.githubusercontent.com/finos/common-cloud-controls/refs/heads/dev/common/controls.yaml",
		"https://raw.githubusercontent.com/finos/common-cloud-controls/refs/heads/dev/common/threats.yaml",
		"https://raw.githubusercontent.com/finos/common-cloud-controls/refs/heads/dev/common/capabilities.yaml",
	})
	if err != nil {
		fmt.Printf("Error loading catalog: %v\n", err)
		os.Exit(1)
	}

	for _, cap := range catalog.Capabilities {
		if cap.Id == "" || cap.Title == "" {
			continue
		}
		sortedCapability := availableCapability{
			Data: cap,
		}
		for _, threat := range catalog.Threats {
			if threat.Id == "" || threat.Title == "" || len(threat.Capabilities) == 0 {
				continue
			}
			for _, tc := range threat.Capabilities {
				if tc.ReferenceId != "CCC" {
					continue
				}
				for _, mappedCapabilityId := range tc.Identifiers {
					if cap.Id == mappedCapabilityId {
						sortedCapability.Threats = append(sortedCapability.Threats, availableThreat{
							Data: threat,
						})
					}
				}
			}
		}
		for _, family := range catalog.ControlFamilies {
			for _, control := range family.Controls {
				if control.Id == "" {
					continue
				}
				for _, ct := range control.ThreatMappings {
					if ct.ReferenceId != "CCC" {
						continue
					}
					for _, threatId := range ct.Identifiers {
						for i, threat := range sortedCapability.Threats {
							if threat.Data.Id == threatId {
								sortedCapability.Threats[i].Controls = append(threat.Controls, availableControl{
									Data:              control,
									FamilyTitle:       family.Title,
									FamilyDescription: family.Description,
								})
							}
						}
					}
				}
			}
		}
		output = append(output, sortedCapability)
	}

	return output
}

func loadChoices() (choices []list.Item) {
	data := loadData()

	for _, capability := range data {
		var threatList []string
		var controlList []string
		for _, threat := range capability.Threats {
			threatList = append(threatList, threat.Data.Id)
			for _, control := range threat.Controls {
				if !slices.Contains(controlList, control.Data.Id) {
					controlList = append(controlList, control.Data.Id)
				}
			}
		}

		description := fmt.Sprintf("Threats: %v | Controls: %v", len(threatList), len(controlList))

		choice := item{
			id:          capability.Data.Id,
			title:       capability.Data.Title,
			capability:  capability,
			description: description,
		}
		choices = append(choices, choice)
	}

	// Sort by title
	sort.Slice(choices, func(i, j int) bool {
		return choices[i].(item).capability.Data.Id < choices[j].(item).capability.Data.Id
	})

	return choices
}

// model.go

package main

import (
	"github.com/charmbracelet/bubbles/key"
	"github.com/charmbracelet/bubbles/list"
	tea "github.com/charmbracelet/bubbletea"
)

type model struct {
	list         list.Model
	keys         *listKeyMap
	delegateKeys *delegateKeyMap
}

func newModel() model {
	var (
		// itemGenerator randomItemGenerator
		delegateKeys = newDelegateKeyMap()
		listKeys     = newListKeyMap()
	)

	items := loadChoices()

	// Setup list
	delegate := newItemDelegate(delegateKeys)
	catalogCanvas := list.New(items, delegate, 0, 0)
	catalogCanvas.Title = titleText
	catalogCanvas.Styles.Title = titleStyle
	catalogCanvas.AdditionalFullHelpKeys = func() []key.Binding {
		return []key.Binding{
			listKeys.toggleSpinner,
			listKeys.insertItem,
			listKeys.toggleTitleBar,
			listKeys.toggleStatusBar,
			listKeys.togglePagination,
			listKeys.toggleHelpMenu,
		}
	}

	return model{
		list:         catalogCanvas,
		keys:         listKeys,
		delegateKeys: delegateKeys,
	}
}

func (m model) Init() tea.Cmd {
	return nil
}

func (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	var cmds []tea.Cmd

	switch msg := msg.(type) {
	case tea.WindowSizeMsg:
		h, v := appStyle.GetFrameSize()
		m.list.SetSize(msg.Width-h, msg.Height-v)

	case tea.KeyMsg:
		// Don't match any of the keys below if we're actively filtering.
		if m.list.FilterState() == list.Filtering {
			break
		}

		switch {
		case key.Matches(msg, m.keys.toggleSpinner):
			cmd := m.list.ToggleSpinner()
			return m, cmd

		case key.Matches(msg, m.keys.toggleTitleBar):
			v := !m.list.ShowTitle()
			m.list.SetShowTitle(v)
			m.list.SetShowFilter(v)
			m.list.SetFilteringEnabled(v)
			return m, nil

		case key.Matches(msg, m.keys.toggleStatusBar):
			m.list.SetShowStatusBar(!m.list.ShowStatusBar())
			return m, nil

		case key.Matches(msg, m.keys.togglePagination):
			m.list.SetShowPagination(!m.list.ShowPagination())
			return m, nil

		case key.Matches(msg, m.keys.toggleHelpMenu):
			m.list.SetShowHelp(!m.list.ShowHelp())
			return m, nil

		case key.Matches(msg, m.keys.insertItem):
			m.delegateKeys.remove.SetEnabled(true)

		case key.Matches(msg, m.keys.finalizeSelection):
			err := writeOutputCatalog("output.yaml")
			if err != nil {
				return m, tea.Println("Failed to write output.yaml: " + err.Error())
			}
			return m, tea.Quit

		}
	}

	// This will also call our delegate's update function.
	newListModel, cmd := m.list.Update(msg)
	m.list = newListModel
	cmds = append(cmds, cmd)

	return m, tea.Batch(cmds...)
}

func (m model) View() string {
	return appStyle.Render(m.list.View())
}

// delegate.go

package main

import (
	"strings"

	"github.com/charmbracelet/bubbles/key"
	"github.com/charmbracelet/bubbles/list"
	tea "github.com/charmbracelet/bubbletea"
)

func newItemDelegate(keys *delegateKeyMap) list.DefaultDelegate {
	d := list.NewDefaultDelegate()

	d.UpdateFunc = func(msg tea.Msg, model *list.Model) tea.Cmd {
		var title string

		if _, ok := model.SelectedItem().(item); !ok {
			return nil
		}

		switch msg := msg.(type) {
		case tea.KeyMsg:
			switch {
			case key.Matches(msg, keys.choose):
				if i, ok := model.SelectedItem().(item); ok {
					capabilityId := strings.Split(i.title, ":")[0]

					if _, ok := selectedCapabilities[capabilityId]; ok {
						if _, ok := triedToReselectCapability[capabilityId]; ok {
							return model.NewStatusMessage(statusMessageStyle("You can stop clicking on " + capabilityId))
						}
						triedToReselectCapability[capabilityId] = true
						return model.NewStatusMessage(statusMessageStyle("Already selected " + capabilityId))
					}
					selectedCapabilities[capabilityId] = i
					return model.NewStatusMessage(statusMessageStyle("Selected " + capabilityId))
				}

			case key.Matches(msg, keys.remove):
				index := model.Index()
				model.RemoveItem(index)
				if len(model.Items()) == 0 {
					keys.remove.SetEnabled(false)
				}
				return model.NewStatusMessage(statusMessageStyle("Removed from canvas: " + title))
			}
		}

		return nil
	}

	help := []key.Binding{keys.choose, keys.remove}

	d.ShortHelpFunc = func() []key.Binding {
		return help
	}

	d.FullHelpFunc = func() [][]key.Binding {
		return [][]key.Binding{help}
	}

	return d
}

type delegateKeyMap struct {
	choose               key.Binding
	remove               key.Binding
	finishedCapabilities key.Binding
}

// Additional short help entries. This satisfies the help.KeyMap interface and
// is entirely optional.
func (d delegateKeyMap) ShortHelp() []key.Binding {
	return []key.Binding{
		d.choose,
		d.remove,
		d.finishedCapabilities,
	}
}

// Additional full help entries. This satisfies the help.KeyMap interface and
// is entirely optional.
func (d delegateKeyMap) FullHelp() [][]key.Binding {
	return [][]key.Binding{
		{
			d.choose,
			d.remove,
			d.finishedCapabilities,
		},
	}
}

func newDelegateKeyMap() *delegateKeyMap {
	return &delegateKeyMap{
		choose: key.NewBinding(
			key.WithKeys("enter"),
			key.WithHelp("enter", "choose"),
		),
		remove: key.NewBinding(
			key.WithKeys("x", "backspace"),
			key.WithHelp("x", "delete"),
		),
		finishedCapabilities: key.NewBinding(
			key.WithKeys("space"),
			key.WithHelp("space", "finish capabilities"),
		),
	}
}

// write.go

package main

import (
	"os"

	"github.com/revanite-io/sci/pkg/layer2"
	"gopkg.in/yaml.v3"
)

func writeOutputCatalog(path string) error {
	catalog := generateOutputCatalog()
	data, err := yaml.Marshal(catalog)
	if err != nil {
		return err
	}
	return os.WriteFile(path, data, 0644)
}

func generateOutputCatalog() (outputCatalog layer2.Catalog) {
	var sharedControls []string
	var sharedThreats []string
	var sharedCapabilities []string

	for _, item := range selectedCapabilities {
		sharedCapabilities = append(sharedCapabilities, item.id)
		for _, threat := range item.capability.Threats {
			sharedThreats = append(sharedThreats, threat.Data.Id)
			for _, control := range threat.Controls {
				sharedControls = append(sharedControls, control.Data.Id)
			}
		}
	}

	outputCatalog = layer2.Catalog{
		SharedControls: []layer2.Mapping{
			{
				ReferenceId: "CCC",
				Identifiers: sharedControls,
			},
		},
		SharedThreats: []layer2.Mapping{
			{
				ReferenceId: "CCC",
				Identifiers: sharedThreats,
			},
		},
		SharedCapabilities: []layer2.Mapping{
			{
				ReferenceId: "CCC",
				Identifiers: sharedCapabilities,
			},
		},
	}
	return outputCatalog
}
